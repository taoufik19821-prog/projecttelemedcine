import React, { useContext, useEffect, useState } from "react";
import { DoctorContext } from "../../context/DoctorContext";
import { toast } from "react-toastify";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { assets } from "../../assets/assets";

const DoctorReviewPage = () => {
  const { dToken, assignedPredictions, getAssignedReviews, reviewPrediction } =
    useContext(DoctorContext);

  const [loadingReviews, setLoadingReviews] = useState(true);

  // ✅ Fetch Assigned Predictions on Load
  useEffect(() => {
    if (dToken) {
      setLoadingReviews(true);
      getAssignedReviews()
        .catch((error) => {
          console.error("Failed to fetch assigned reviews:", error);
          toast.error("Failed to load reviews.");
        })
        .finally(() => setLoadingReviews(false));
    }
  }, [dToken]);

  const [loadingStates, setLoadingStates] = useState({});

  const handleReview = async (predictionId, status) => {
    setLoadingStates((prev) => ({ ...prev, [predictionId]: true }));
    try {
      await reviewPrediction(predictionId, status);
      toast.success(`Prediction ${status}`);
      getAssignedReviews(); // Refresh from backend
    } catch (error) {
      toast.error(`Failed to ${status} prediction.`);
    } finally {
      setLoadingStates((prev) => ({ ...prev, [predictionId]: false }));
    }
  };

  // 🛠️ Generate PDF & Open in New Tab
  const handleViewResult = (prediction) => {
    const pdf = new jsPDF("p", "mm", "a4");

    // ✅ Ensure prediction inputs exist
    const inputs = prediction.userData?.inputs || prediction.inputs || {};

    // ✅ Set margins and styling
    const pageWidth = pdf.internal.pageSize.getWidth();
    let y = 10;

    // ✅ Title Header
    pdf.setFont("Helvetica", "bold");
    pdf.setFontSize(18);
    pdf.text("Patient Diagnosis Report", pageWidth / 2, y, { align: "center" });
    y += 10;

    // ✅ Patient Info Section
    pdf.setFontSize(14);
    pdf.setFont("Helvetica", "normal");
    pdf.setTextColor(100);

    const patientDetails = [
      `Patient: ${prediction.userData?.name || "Unknown"}`,
      `Email: ${prediction.userData?.email || "N/A"}`,
      `Disease: ${prediction.disease}`,
      `Result: ${prediction.predictionResult}`,
      `Probability: ${prediction.probability.toFixed(2)}%`,
    ];

    patientDetails.forEach((line) => {
      pdf.text(line, 10, y);
      y += 8;
    });

    y += 5;

    // ✅ Divider
    pdf.setDrawColor(200);
    pdf.line(10, y, pageWidth - 10, y);
    y += 10;

    // ✅ Patient Inputs Section
    pdf.setFont("Helvetica", "bold");
    pdf.setFontSize(16);
    pdf.setTextColor(50);
    pdf.text("Patient Inputs:", 10, y);
    y += 8;

    pdf.setFont("Helvetica", "normal");
    pdf.setFontSize(12);
    pdf.setTextColor(80);

    if (Object.keys(inputs).length > 0) {
      Object.entries(inputs).forEach(([key, value]) => {
        pdf.text(`${key.replace(/_/g, " ").toUpperCase()}: ${value}`, 10, y);
        y += 7;
      });
    } else {
      pdf.text("No input data provided.", 10, y);
      y += 7;
    }

    y += 5;

    // ✅ Footer
    pdf.setDrawColor(200);
    pdf.line(10, y, pageWidth - 10, y);
    y += 10;
    pdf.setFont("Helvetica", "italic");
    pdf.setFontSize(10);
    pdf.setTextColor(150);
    pdf.text("Generated by Health Prediction System", pageWidth / 2, y, {
      align: "center",
    });

    // ✅ Open PDF in a new tab
    const pdfBlob = pdf.output("blob");
    const pdfUrl = URL.createObjectURL(pdfBlob);
    window.open(pdfUrl);
  };

  return (
    <div className="w-full max-w-6xl m-5">
      <p className="mb-3 text-lg font-medium">Doctor Review Panel</p>

      <div className="bg-white border border-gray-200 rounded text-sm max-h-[80vh] min-h-[60vh] overflow-y-scroll">
        {/* Table Header */}
        <div className="hidden sm:grid grid-cols-[0.7fr_2fr_1.5fr_1.5fr_2fr_1fr_1.5fr] py-3 px-6 border-b border-gray-200">
          <p className="text-center">#</p>
          <p className="text-left">Patient</p>
          <p className="text-center">Disease</p>
          <p className="text-center">Status</p>
          <p className="text-center">Submitted On</p>
          <p className="text-center">View Result</p>
          <p className="text-center">Action</p>
        </div>

        {/* Loading State */}
        {loadingReviews ? (
          <p className="text-gray-400 text-center py-6">Loading reviews...</p>
        ) : assignedPredictions.length === 0 ? (
          <p className="text-gray-500 text-center py-6">No pending reviews.</p>
        ) : (
          assignedPredictions.map((item, index) => (
            <div
              className="flex flex-wrap justify-between sm:grid sm:grid-cols-[0.7fr_2fr_1.5fr_1.5fr_2fr_1fr_1.5fr] items-center text-gray-500 py-3 px-6 border-b border-gray-200 hover:bg-gray-50"
              key={item._id}
            >
              {/* Serial Number */}
              <p className="text-center">{index + 1}</p>

              {/* Patient Info */}
              <div className="flex items-center gap-2 text-left">
                <img
                  className="w-8 h-8 rounded-full object-cover"
                  src={item.userData?.image || "/placeholder.png"}
                  alt="Patient"
                />
                <p className="whitespace-nowrap">
                  {item.userData?.name || "Unknown"}
                </p>
              </div>

              {/* Disease */}
              <p className="text-center capitalize">{item.disease || "N/A"}</p>

              {/* Status */}
              <p
                className={`text-center font-medium ${
                  item.status === "approved"
                    ? "text-green-500"
                    : item.status === "rejected"
                    ? "text-red-500"
                    : "text-yellow-500"
                }`}
              >
                {item.status}
              </p>

              {/* Date Submitted */}
              <p className="text-center text-sm">
                {item.date ? new Date(item.date).toLocaleString() : "No Date"}
              </p>

              {/* View Result Button */}
              <div className="text-center">
                <button
                  onClick={() => handleViewResult(item)}
                  className="text-blue-500 text-sm font-medium hover:underline"
                >
                  View Result
                </button>
              </div>

              {/* Actions with Icons */}
              <div className="text-center">
                {item.status === "approved" ? (
                  <p className="text-green-500 text-sm font-medium">Approved</p>
                ) : item.status === "rejected" ? (
                  <p className="text-red-500 text-sm font-medium">Rejected</p>
                ) : (
                  <div className="flex justify-center gap-3">
                    <img
                      onClick={
                        !loadingStates[item._id]
                          ? () => handleReview(item._id, "approved")
                          : null
                      }
                      className={`w-10 cursor-pointer ${
                        loadingStates[item._id]
                          ? "opacity-50 cursor-not-allowed"
                          : ""
                      }`}
                      src={assets.tick_icon}
                      alt="Approve"
                    />
                    <img
                      onClick={
                        !loadingStates[item._id]
                          ? () => handleReview(item._id, "rejected")
                          : null
                      }
                      className={`w-10 cursor-pointer ${
                        loadingStates[item._id]
                          ? "opacity-50 cursor-not-allowed"
                          : ""
                      }`}
                      src={assets.cancel_icon}
                      alt="Reject"
                    />
                  </div>
                )}
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default DoctorReviewPage;
